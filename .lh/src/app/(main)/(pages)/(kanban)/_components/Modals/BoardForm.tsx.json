{
    "sourceFile": "src/app/(main)/(pages)/(kanban)/_components/Modals/BoardForm.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1745855283196,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1745936564859,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -93,25 +93,27 @@\n                         props.onNewBoardCreated && props.onNewBoardCreated(data.uuid);\r\n                     });\r\n             } else {\r\n                 const columns = [];\r\n-                if (columnsInput.value) {\r\n-                    for (const [i, column] of columnsInput.value.entries()) {\r\n-                        const existingColumn = props.boardData?.columns?.find((col) => col.id.toString() === column.id);\r\n-                        if (existingColumn) {\r\n-                            columns.push({\r\n-                                uuid: existingColumn.uuid,\r\n-                                name: column.value,\r\n-                                position: i,\r\n-                            });\r\n-                        } else {\r\n-                            columns.push({\r\n-                                name: column.value,\r\n-                                position: i,\r\n-                            });\r\n-                        }\r\n-                    }\r\n-                }\r\n+              if (columnsInput.value) {\r\n+                 for (let i = 0; i < columnsInput.value.length; i++) {\r\n+                   const column = columnsInput.value[i];\r\n+                    const existingColumn = props.boardData?.columns?.find((col) => col.id.toString() === column.id);\r\n+                 if (existingColumn) {\r\n+                     columns.push({\r\n+                      uuid: existingColumn.uuid,\r\n+                      name: column.value,\r\n+                      position: i,\r\n+            });\r\n+        } else {\r\n+            columns.push({\r\n+                name: column.value,\r\n+                position: i,\r\n+            });\r\n+        }\r\n+    }\r\n+}\r\n+\r\n                 // If any existing columns were removed, open the danger modal\r\n                 const originalColumns = props.boardData?.columns?.map((col) => col.uuid);\r\n                 const newColumns = columns.map((col) => col.uuid);\r\n                 if (originalColumns?.some((col) => !newColumns.includes(col)) && !dangerAcknowledged) {\r\n"
                }
            ],
            "date": 1745855283196,
            "name": "Commit-0",
            "content": "import { FC, useEffect, useRef, useState } from 'react';\r\nimport useInput from '@/hooks/useInput';\r\nimport useModal from '@/hooks/useModal';\r\nimport { Board, MultiInput } from '@/types';\r\nimport { randomHexColor } from '@/utils/utils';\r\nimport { ButtonPrimary } from '../Buttons/Buttons';\r\nimport { Input, MultiValueInput } from '../Inputs/Inputs';\r\n\r\n// Validate input length - must be between 1 and 20 characters. Return tuple of boolean and error message.\r\nconst validateName = (val: string | undefined): [boolean, string] => {\r\n    if (!val || val?.trim().length < 1) return [false, \"Can't be empty\"];\r\n    if (val?.trim().length > 20) return [false, `${val.trim().length}/20`];\r\n    return [true, ''];\r\n};\r\n\r\nconst validateColumns = (val: MultiInput[]): [boolean, string] => {\r\n    if (val?.length === 0 || !val) return [true, ''];\r\n    for (const item of val) {\r\n        const [isValid, errorMessage] = validateName(item.value);\r\n        if (!isValid) return [isValid, errorMessage];\r\n    }\r\n    return [true, ''];\r\n};\r\n\r\nconst BoardForm: FC<{\r\n    onNewBoardCreated?: Function;\r\n    onBoardUpdated?: Function;\r\n    boardData?: Board;\r\n    formType: 'new' | 'edit';\r\n}> = (props) => {\r\n    const initialColumns: MultiInput[] | undefined = props.boardData?.columns\r\n        ?.sort((a, b) => a.position - b.position)\r\n        .map((column) => {\r\n            return { id: column.id.toString(), value: column.name, isValid: true, isTouched: false, errorMsg: '' };\r\n        });\r\n    const [dangerAcknowledged, setDangerAcknowledged] = useState<boolean>(false);\r\n    const nameInput = useInput<string>({ validateFn: validateName, initialValue: props.boardData?.name });\r\n    const columnsInput = useInput<MultiInput[]>({ validateFn: validateColumns, initialValue: initialColumns });\r\n    const formRef = useRef<HTMLFormElement>(null);\r\n\r\n    const { Component: DeleteTaskModal, ...deleteColumnsModal } = useModal({\r\n        type: 'danger',\r\n        dangerHeader: 'Delete column(s)?',\r\n        dangerMessage:\r\n            'Removing existing columns will also delete all tasks in those columns. This action cannot be undone.',\r\n        onConfirmDelete: () => {\r\n            setDangerAcknowledged(true);\r\n        },\r\n    });\r\n\r\n    useEffect(() => {\r\n        if (dangerAcknowledged) {\r\n            formRef?.current?.requestSubmit();\r\n        }\r\n    }, [dangerAcknowledged]);\r\n\r\n    const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\r\n        e.preventDefault();\r\n        nameInput.setIsTouched(true);\r\n        columnsInput.setIsTouched(true);\r\n\r\n        const newColumnsValue = columnsInput.value?.map((item) => {\r\n            let [isValid, errorMsg] = validateName(item.value);\r\n            if (columnsInput.value?.find((col) => col.value === item.value && col.id !== item.id)) {\r\n                [isValid, errorMsg] = [false, 'Must be unique'];\r\n                columnsInput.isValid = false;\r\n            }\r\n            return { ...item, isValid, errorMsg, isTouched: true };\r\n        });\r\n        if (newColumnsValue) columnsInput.customValueChangeHandler(newColumnsValue);\r\n        const formIsValid = nameInput.isValid && columnsInput.isValid;\r\n        if (formIsValid) {\r\n            if (props.formType === 'new') {\r\n                const columns = columnsInput.value?.map((item) => {\r\n                    return {\r\n                        name: item.value,\r\n                        color: randomHexColor(),\r\n                    };\r\n                });\r\n\r\n                fetch('/api/boards', {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                    },\r\n                    body: JSON.stringify({\r\n                        name: nameInput.value,\r\n                        columns: columns,\r\n                    }),\r\n                })\r\n                    .then((res) => res.json())\r\n                    .then((data) => {\r\n                        props.onNewBoardCreated && props.onNewBoardCreated(data.uuid);\r\n                    });\r\n            } else {\r\n                const columns = [];\r\n                if (columnsInput.value) {\r\n                    for (const [i, column] of columnsInput.value.entries()) {\r\n                        const existingColumn = props.boardData?.columns?.find((col) => col.id.toString() === column.id);\r\n                        if (existingColumn) {\r\n                            columns.push({\r\n                                uuid: existingColumn.uuid,\r\n                                name: column.value,\r\n                                position: i,\r\n                            });\r\n                        } else {\r\n                            columns.push({\r\n                                name: column.value,\r\n                                position: i,\r\n                            });\r\n                        }\r\n                    }\r\n                }\r\n                // If any existing columns were removed, open the danger modal\r\n                const originalColumns = props.boardData?.columns?.map((col) => col.uuid);\r\n                const newColumns = columns.map((col) => col.uuid);\r\n                if (originalColumns?.some((col) => !newColumns.includes(col)) && !dangerAcknowledged) {\r\n                    deleteColumnsModal.open();\r\n                } else {\r\n                    fetch(`/api/boards/${props.boardData?.uuid}`, {\r\n                        method: 'PUT',\r\n                        headers: {\r\n                            'Content-Type': 'application/json',\r\n                        },\r\n                        body: JSON.stringify({\r\n                            name: nameInput.value,\r\n                            columns: columns,\r\n                        }),\r\n                    }).then(() => {\r\n                        props.onBoardUpdated && props.onBoardUpdated();\r\n                    });\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <div className={`flex-col ${deleteColumnsModal.isOpen ? 'hidden' : 'flex'}`}>\r\n                <h2 className=\"mb-6 text-lg font-bold dark:text-white\">\r\n                    {props.formType === 'new' ? 'Add New Board' : 'Edit Board'}\r\n                </h2>\r\n                <form ref={formRef} onSubmit={handleSubmit} action=\"submit\" className=\"flex flex-col\">\r\n                    <Input\r\n                        value={nameInput.value ?? ''}\r\n                        onChange={nameInput.valueChangeHandler}\r\n                        onBlur={nameInput.inputBlurHandler}\r\n                        haserror={nameInput.hasError}\r\n                        errorMsg={nameInput.errorMsg}\r\n                        label=\"Board Name\"\r\n                        id=\"board-name\"\r\n                        placeholder=\"e.g. Web Design\"\r\n                        className=\"mb-6\"\r\n                    />\r\n                    <MultiValueInput\r\n                        draggable={true}\r\n                        id=\"board-columns\"\r\n                        placeholder=\"e.g. To Do\"\r\n                        label=\"Board Columns\"\r\n                        className=\"mb-6\"\r\n                        values={columnsInput.value}\r\n                        changeHandler={columnsInput.customValueChangeHandler}\r\n                        validationHandler={validateName}\r\n                        addBtnText=\"+ Add New Column\"\r\n                    />\r\n                    <ButtonPrimary data-testid=\"board-submit\">\r\n                        {props.formType === 'new' ? 'Create New Board' : 'Save Changes'}\r\n                    </ButtonPrimary>\r\n                </form>\r\n            </div>\r\n            <DeleteTaskModal />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default BoardForm;\r\n"
        }
    ]
}