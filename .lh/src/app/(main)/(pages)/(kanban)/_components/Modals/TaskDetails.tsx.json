{
    "sourceFile": "src/app/(main)/(pages)/(kanban)/_components/Modals/TaskDetails.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1745855283212,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1745855283212,
            "name": "Commit-0",
            "content": "import { FC, MouseEventHandler, useEffect, useRef, useState } from \"react\";\r\nimport { mutate } from \"swr\";\r\nimport useInput from \"@/hooks/useInput\";\r\nimport useModal from \"@/hooks/useModal\";\r\nimport usePopover from \"@/hooks/usePopover\";\r\nimport { useBoardsContext } from \"@/store/BoardListContext\";\r\nimport { Column, Subtask, Task } from \"@/types\";\r\nimport { VerticalEllipsisIcon } from \"../Icons/Icons\";\r\nimport { Checkbox, Dropdown } from \"../Inputs/Inputs\";\r\nimport useSWR from \"swr\";\r\nimport { fetcher } from \"@/utils/utils\";\r\nimport { LinkContainer, PopoverLink } from \"../Popover/Popover\";\r\nimport TaskForm from \"./TaskForm\";\r\nimport Spinner from \"../Spinner/Spinner\";\r\n\r\nconst SubtaskRow: FC<{\r\n  subtask: Subtask;\r\n  i: number;\r\n  setSubtaskStatus: (subtask: Subtask) => void;\r\n  disabled: boolean;\r\n}> = ({ subtask, i, setSubtaskStatus, disabled }) => {\r\n  const checkboxRef = useRef<HTMLInputElement>(null);\r\n  const [isChecked, setIsChecked] = useState(subtask.completed);\r\n\r\n  const subtaskClickHandler = async () => {\r\n    if (disabled) return;\r\n    const newValue = !isChecked;\r\n    setIsChecked(newValue);\r\n    setSubtaskStatus(subtask);\r\n  };\r\n\r\n  return (\r\n    <li\r\n      tabIndex={0}\r\n      data-testid=\"subtask\"\r\n      key={subtask.uuid}\r\n      className={`mb-2 flex cursor-pointer items-center gap-4 rounded bg-light-grey p-3 transition-all  dark:bg-v-dark-grey  ${\r\n        isChecked\r\n          ? \"\"\r\n          : \"hover:bg-primary hover:bg-opacity-25 dark:hover:bg-primary dark:hover:bg-opacity-25\"\r\n      }`}\r\n      onClick={subtaskClickHandler}\r\n      onKeyDown={(e) => {\r\n        if (e.key === \"Enter\") {\r\n          subtaskClickHandler();\r\n        }\r\n      }}\r\n    >\r\n      <Checkbox\r\n        className=\"pointer-events-none\"\r\n        ref={checkboxRef}\r\n        checked={isChecked}\r\n        id={`subtask-checkbox-${i + 1}`}\r\n      />\r\n      <span\r\n        className={`text-xs font-medium text-black transition-all dark:text-white ${\r\n          isChecked ? \"line-through opacity-50\" : \"\"\r\n        }`}\r\n      >\r\n        {subtask.name}\r\n      </span>\r\n    </li>\r\n  );\r\n};\r\n\r\nconst TaskDetails: FC<{\r\n  taskUUID: string;\r\n  columns: Column[];\r\n  closeModal: Function;\r\n  board: any;\r\n}> = ({ taskUUID, columns, closeModal, board }) => {\r\n  const { mutate: mutateTask, data: taskData } = useSWR<Task>(\r\n    `/api/tasks/${taskUUID}`,\r\n    fetcher,\r\n    {}\r\n  );\r\n  const [subtaskUpdating, setSubtaskUpdating] = useState(false);\r\n  const { selectedBoard } = useBoardsContext();\r\n  const columnDropdown = useInput<string>({\r\n    initialValue: columns.find((col) => col.uuid === taskData?.column_uuid)\r\n      ?.name\r\n  });\r\n\r\n  const { Component: OptionsPopover, ...optionsPopover } = usePopover();\r\n\r\n  const handleOptionsClick: MouseEventHandler<HTMLButtonElement> = (e) => {\r\n    optionsPopover.toggle(e);\r\n  };\r\n\r\n  const modalTitle = \"Delete this task?\";\r\n  const modalMessage = `Are you sure you want to delete the ‘${taskData?.name}’ task? This action cannot be reversed.`;\r\n\r\n  const confirmDeleteHandler = async () => {\r\n    await fetch(`/api/tasks/${taskData!.uuid}`, {\r\n      method: \"DELETE\"\r\n    });\r\n    closeModal();\r\n  };\r\n\r\n  const { Component: EditTaskModal, ...editTaskModal } = useModal();\r\n\r\n  const { Component: DeleteTaskModal, ...deleteTaskModal } = useModal({\r\n    type: \"danger\",\r\n    dangerHeader: modalTitle,\r\n    dangerMessage: modalMessage,\r\n    onConfirmDelete: confirmDeleteHandler\r\n  });\r\n\r\n  const taskDeleteHandler = () => {\r\n    optionsPopover.close();\r\n    deleteTaskModal.toggle();\r\n  };\r\n\r\n  const taskEditHandler = () => {\r\n    optionsPopover.close();\r\n    editTaskModal.toggle();\r\n  };\r\n\r\n  const statusChangeHandler = async (val: string) => {\r\n    const column = columns.find((col) => col.name === val);\r\n    if (column?.uuid && column.uuid !== taskData!.column_uuid) {\r\n      await fetch(`/api/tasks/${taskData!.uuid}`, {\r\n        method: \"PUT\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\"\r\n        },\r\n        body: JSON.stringify({\r\n          column_uuid: column.uuid\r\n        })\r\n      });\r\n      mutateTask({ ...taskData!, column_uuid: column.uuid });\r\n      board?.mutate();\r\n      // mutate(`/api/boards/${selectedBoard?.uuid}`);\r\n    }\r\n  };\r\n\r\n  const subtaskChangeHandler = async (subtask: Subtask) => {\r\n    const newSubtasks = taskData!.subtasks.map((sub) => {\r\n      if (sub.uuid === subtask.uuid) {\r\n        return { ...sub, completed: !sub.completed };\r\n      }\r\n      return sub;\r\n    });\r\n    setSubtaskUpdating(true);\r\n    const fetchPromise = fetch(`/api/subtasks/${subtask.uuid}`, {\r\n      method: \"PUT\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify({\r\n        completed: !subtask.completed\r\n      })\r\n    });\r\n    taskData!.subtasks = newSubtasks;\r\n    await fetchPromise;\r\n    setSubtaskUpdating(false);\r\n    mutateTask({ ...taskData!, subtasks: newSubtasks });\r\n    board?.mutate();\r\n    // mutate(`/api/boards/${selectedBoard?.uuid}`);\r\n  };\r\n\r\n  const handleTaskUpdate = async (task: Task) => {\r\n    board?.mutate();\r\n    // mutate(`/api/boards/${selectedBoard?.uuid}`);\r\n    mutateTask(task);\r\n    editTaskModal.close();\r\n  };\r\n\r\n  const completedTasks = taskData?.subtasks.filter(\r\n    (subtask) => subtask.completed\r\n  ).length;\r\n\r\n  useEffect(() => {\r\n    const col = columns.find((col) => col.uuid === taskData?.column_uuid);\r\n    if (col) columnDropdown.setValue(col.name);\r\n  }, [taskData?.column_uuid]);\r\n\r\n  return (\r\n    <div\r\n      data-testid=\"task-details\"\r\n      className={deleteTaskModal.isOpen || editTaskModal.isOpen ? \"hidden\" : \"\"}\r\n    >\r\n      {taskData && !editTaskModal.isOpen ? (\r\n        <>\r\n          <div className=\"mb-6 flex items-center justify-between\">\r\n            <h2\r\n              data-testid=\"task-name\"\r\n              className=\"text-lg font-bold dark:text-white\"\r\n            >\r\n              {taskData.name}\r\n            </h2>\r\n            <button\r\n              data-testid=\"task-options\"\r\n              className=\"h-5 translate-x-3 px-3\"\r\n              onClick={handleOptionsClick}\r\n            >\r\n              <VerticalEllipsisIcon className=\"pointer-events-none\" />\r\n            </button>\r\n            <OptionsPopover\r\n              className={`mt-8 ${\r\n                window.innerWidth > 620 ? \"-translate-x-24\" : \"-translate-x-44\"\r\n              }`}\r\n            >\r\n              <LinkContainer>\r\n                <PopoverLink id=\"task-edit\" onClick={taskEditHandler}>\r\n                  Edit Task\r\n                </PopoverLink>\r\n                <PopoverLink\r\n                  id=\"task-delete\"\r\n                  onClick={taskDeleteHandler}\r\n                  danger\r\n                >\r\n                  Delete Task\r\n                </PopoverLink>\r\n              </LinkContainer>\r\n            </OptionsPopover>\r\n            <DeleteTaskModal />\r\n          </div>\r\n          <p\r\n            data-testid=\"task-description\"\r\n            className=\"mb-6 whitespace-pre-wrap text-sm font-medium leading-6 text-mid-grey\"\r\n          >\r\n            {taskData.description}\r\n          </p>\r\n          {taskData.subtasks.length > 0 && (\r\n            <span\r\n              data-testid=\"subtasks-header\"\r\n              className=\"text-sm font-bold text-mid-grey dark:text-white\"\r\n            >\r\n              {`Subtasks (${completedTasks} of ${taskData.subtasks.length})`}\r\n            </span>\r\n          )}\r\n          <ul className=\"mt-4 mb-6\">\r\n            {taskData.subtasks.map((subtask, i) => (\r\n              <SubtaskRow\r\n                disabled={subtaskUpdating}\r\n                key={subtask.uuid}\r\n                subtask={subtask}\r\n                i={i}\r\n                setSubtaskStatus={subtaskChangeHandler}\r\n              />\r\n            ))}\r\n          </ul>\r\n          <label\r\n            htmlFor=\"column-select\"\r\n            className=\"pointer-events-none text-sm font-bold text-mid-grey dark:text-white\"\r\n          >\r\n            Current status\r\n          </label>\r\n          {\r\n            <Dropdown\r\n              className=\"mt-2\"\r\n              setValue={columnDropdown.setValue}\r\n              value={columnDropdown.value}\r\n              id=\"column-select\"\r\n              options={columns.map((col) => col.name)}\r\n              onValueSelected={statusChangeHandler}\r\n            />\r\n          }\r\n        </>\r\n      ) : (\r\n        <div className=\"my-16 flex justify-center\">\r\n          <Spinner />\r\n        </div>\r\n      )}\r\n      <EditTaskModal>\r\n        <TaskForm\r\n          formType=\"edit\"\r\n          taskData={taskData}\r\n          closeModal={editTaskModal.close}\r\n          columns={columns}\r\n          onTaskUpdated={handleTaskUpdate}\r\n        />\r\n      </EditTaskModal>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TaskDetails;\r\n"
        }
    ]
}