{
    "sourceFile": "src/app/(main)/(pages)/(kanban)/_components/Modals/TaskForm.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1745855090972,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1745855090972,
            "name": "Commit-0",
            "content": "import { FC } from 'react';\r\nimport useInput from '@/hooks/useInput';\r\nimport { Column, MultiInput, Task } from '@/types';\r\nimport { ButtonPrimary } from '../Buttons/Buttons';\r\nimport { Dropdown, Input, MultiValueInput, Textarea } from '../Inputs/Inputs';\r\nimport { mutate } from 'swr';\r\n\r\nconst validateTitle = (val: string | undefined): [boolean, string] => {\r\n    if (!val || val?.trim().length < 1) return [false, \"Can't be empty\"];\r\n    if (val?.trim().length > 100) return [false, `${val?.trim().length}/100`];\r\n    return [true, ''];\r\n};\r\n\r\nconst validateSubtasks = (val: MultiInput[]): [boolean, string] => {\r\n    if (val?.length === 0 || !val) return [true, ''];\r\n    for (const item of val) {\r\n        const [isValid, errorMessage] = validateTitle(item.value);\r\n        if (!isValid) return [isValid, errorMessage];\r\n    }\r\n    return [true, ''];\r\n};\r\n\r\nconst TaskForm: FC<{\r\n    closeModal: Function;\r\n    columns?: Column[];\r\n    taskData?: Task;\r\n    formType: 'new' | 'edit';\r\n    onTaskUpdated?: Function;\r\n}> = (props) => {\r\n    // Set initial field values if editing an existing task\r\n    const initialSubtasks = props.taskData?.subtasks?.map((subtask) => {\r\n        return { id: subtask.uuid, value: subtask.name, isValid: true, isTouched: false, errorMsg: '' };\r\n    });\r\n    const initialColumn = props.columns?.find((column) => column.uuid === props.taskData?.column_uuid)?.name;\r\n\r\n    const dropdownOptions = props.columns?.map((item) => item.name);\r\n    const nameInput = useInput<string>({ validateFn: validateTitle, initialValue: props.taskData?.name });\r\n    const descriptionInput = useInput<string>({ initialValue: props.taskData?.description });\r\n    const subtasksInput = useInput<MultiInput[]>({ validateFn: validateSubtasks, initialValue: initialSubtasks });\r\n    const columnDropdown = useInput<string>({ initialValue: initialColumn ?? (dropdownOptions && dropdownOptions[0]) });\r\n\r\n    const formIsValid = nameInput.isValid && subtasksInput.isValid;\r\n\r\n    const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\r\n        e.preventDefault();\r\n        nameInput.setIsTouched(true);\r\n        subtasksInput.setIsTouched(true);\r\n        const newColumnsValue = subtasksInput.value?.map((item) => {\r\n            const [isValid, errorMsg] = validateTitle(item.value);\r\n            return { ...item, isValid, errorMsg, isTouched: true };\r\n        });\r\n        if (newColumnsValue) subtasksInput.customValueChangeHandler(newColumnsValue);\r\n        if (formIsValid) {\r\n            const formData = {\r\n                name: nameInput.value,\r\n                description: descriptionInput.value,\r\n                subtasks: subtasksInput.value?.map((item) => {\r\n                    const subtask = props.taskData?.subtasks?.find((subtask) => subtask.uuid === item.id);\r\n                    if (subtask) return { uuid: subtask.uuid, name: item.value };\r\n                    return { name: item.value };\r\n                }),\r\n                column_uuid: props.columns?.find((item) => item.name === columnDropdown.value)?.uuid,\r\n            };\r\n            if (props.formType === 'new') {\r\n                fetch('/api/tasks', {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                    },\r\n                    body: JSON.stringify(formData),\r\n                }).then(() => {\r\n                    mutate(`/api/boards/${props.columns?.[0].board_uuid}`);\r\n                    props.closeModal();\r\n                });\r\n            } else {\r\n                fetch(`/api/tasks/${props.taskData?.uuid}`, {\r\n                    method: 'PUT',\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                    },\r\n                    body: JSON.stringify(formData),\r\n                }).then(() => {\r\n                    props.onTaskUpdated && props.onTaskUpdated();\r\n                });\r\n            }\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div data-testid=\"task-form\" className=\"flex flex-col\">\r\n            <h2 className=\"mb-6 text-lg font-bold dark:text-white\">\r\n                {props.formType === 'new' ? 'Add New Task' : 'Edit Task'}\r\n            </h2>\r\n            <form onSubmit={handleSubmit} action=\"submit\" className=\"flex flex-col\">\r\n                <Input\r\n                    value={nameInput.value ?? ''}\r\n                    onChange={nameInput.valueChangeHandler}\r\n                    onBlur={nameInput.inputBlurHandler}\r\n                    haserror={nameInput.hasError}\r\n                    errorMsg={nameInput.errorMsg}\r\n                    label=\"Title\"\r\n                    id=\"task-title\"\r\n                    placeholder=\"e.g. Take a coffee break\"\r\n                    className=\"mb-6\"\r\n                />\r\n                <Textarea\r\n                    value={descriptionInput.value ?? ''}\r\n                    onChange={descriptionInput.valueChangeHandler}\r\n                    onBlur={descriptionInput.inputBlurHandler}\r\n                    label=\"Description\"\r\n                    id=\"task-description\"\r\n                    placeholder=\"e.g. Itâ€™s always good to take a break. This 15 minute break will \r\n                    recharge the batteries a little.\"\r\n                    className=\"mb-6\"\r\n                />\r\n                {/* <MultiValueInput\r\n                    id=\"subtasks\"\r\n                    placeholder=\"e.g. To Do\"\r\n                    label=\"Subtasks\"\r\n                    className=\"mb-6\"\r\n                    values={subtasksInput.value}\r\n                    changeHandler={subtasksInput.customValueChangeHandler}\r\n                    validationHandler={validateTitle}\r\n                    addBtnText=\"+ Add New Subtask\"\r\n                    fieldType=\"textarea\"\r\n                /> */}\r\n                {dropdownOptions && (\r\n                    <Dropdown\r\n                        setValue={columnDropdown.setValue}\r\n                        value={columnDropdown.value}\r\n                        id=\"column-select\"\r\n                        label=\"Status\"\r\n                        className=\"mb-6\"\r\n                        options={dropdownOptions}\r\n                    />\r\n                )}\r\n                <ButtonPrimary data-testid=\"task-submit\">\r\n                    {props.formType === 'new' ? 'Create New Task' : 'Save Changes'}\r\n                </ButtonPrimary>\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TaskForm;\r\n"
        }
    ]
}