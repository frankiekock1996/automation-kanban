{
    "sourceFile": "src/app/(main)/(pages)/(kanban)/_components/Modals/Modal.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1745855076401,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1745855076401,
            "name": "Commit-0",
            "content": "import { FC, MouseEventHandler, PropsWithChildren, useEffect } from 'react';\r\nimport { ButtonDanger, ButtonSecondary } from '../Buttons/Buttons';\r\n\r\ntype ModalProps = {\r\n    closeModal: () => void;\r\n    className?: string;\r\n    options?: {\r\n        type?: 'mobileMenu' | 'danger';\r\n        dangerHeader?: string;\r\n        dangerMessage?: string;\r\n        onConfirmDelete?: MouseEventHandler<HTMLButtonElement>;\r\n    };\r\n};\r\n\r\nconst ModalBase = (\r\n    props: PropsWithChildren<ModalProps> & { onClickHandler: (event: React.MouseEvent<HTMLDivElement>) => void }\r\n) => {\r\n    const testId = props.options?.type\r\n        ? { mobileMenu: 'mobile-menu', danger: 'danger-modal' }[props.options.type]\r\n        : 'modal';\r\n    return (\r\n        <div\r\n            data-testid=\"modal-backdrop\"\r\n            onClick={props.onClickHandler}\r\n            className={`absolute z-50 bg-black bg-opacity-50 ${\r\n                props.options?.type === 'mobileMenu' ? ' h-full w-full' : 'flex h-screen w-screen items-center'\r\n            }`}\r\n        >\r\n            <dialog\r\n                data-testid={testId}\r\n                className={`z-50 block max-h-[80vh] overflow-auto bg-white dark:bg-dark-grey ${\r\n                    props.options?.type === 'mobileMenu'\r\n                        ? 'my-4 w-72 rounded-lg px-0 py-4 shadow-menu dark:shadow-menu-dark'\r\n                        : 'w-86 rounded-md p-6 sm:w-120 sm:p-8'\r\n                } ${props.className || ''}`}\r\n            >\r\n                {props.children}\r\n            </dialog>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst Modal: FC<PropsWithChildren<ModalProps>> = (props) => {\r\n    const onClickHandler = (event: React.MouseEvent<HTMLDivElement>) => {\r\n        event.currentTarget !== event.target ? null : props.closeModal();\r\n    };\r\n\r\n    useEffect(() => {\r\n        const handleEscape = (event: KeyboardEvent) => {\r\n            if (event.key === 'Escape') {\r\n                props.closeModal();\r\n            }\r\n        };\r\n        document.addEventListener('keydown', handleEscape, false);\r\n        return () => {\r\n            document.removeEventListener('keydown', handleEscape, false);\r\n        };\r\n    });\r\n\r\n    const DangerModal = (props: PropsWithChildren<ModalProps>) => {\r\n        return (\r\n            <ModalBase {...props} onClickHandler={onClickHandler}>\r\n                <h2 data-testid=\"danger-header\" className=\"mb-6 text-lg font-bold text-danger\">\r\n                    {props.options?.dangerHeader}\r\n                </h2>\r\n                <p data-testid=\"danger-message\" className=\"mb-6 text-sm text-mid-grey\">\r\n                    {props.options?.dangerMessage}\r\n                </p>\r\n                {props.options?.onConfirmDelete && (\r\n                    <div className=\"flex justify-end gap-4\">\r\n                        <ButtonDanger data-testid=\"danger-confirm\" onClick={props.options?.onConfirmDelete}>\r\n                            Delete\r\n                        </ButtonDanger>\r\n                        <ButtonSecondary data-testid=\"danger-cancel\" onClick={props.closeModal}>\r\n                            Cancel\r\n                        </ButtonSecondary>\r\n                    </div>\r\n                )}\r\n            </ModalBase>\r\n        );\r\n    };\r\n    if (props.options?.type === 'danger') {\r\n        return <DangerModal {...props}></DangerModal>;\r\n    }\r\n    return <ModalBase {...props} onClickHandler={onClickHandler}></ModalBase>;\r\n};\r\nexport default Modal;\r\n"
        }
    ]
}