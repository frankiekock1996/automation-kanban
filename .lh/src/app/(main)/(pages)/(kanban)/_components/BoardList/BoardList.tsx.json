{
    "sourceFile": "src/app/(main)/(pages)/(kanban)/_components/BoardList/BoardList.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1745854559286,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1745854559286,
            "name": "Commit-0",
            "content": "import Link from 'next/link';\r\nimport { useRouter } from 'next/router';\r\nimport React, { FC } from 'react';\r\nimport { BoardIcon } from '../Icons/Icons';\r\nimport type { Board } from '@/types';\r\nimport { useBoardsContext } from '@/store/BoardListContext';\r\nimport useModal from '@/hooks/useModal';\r\nimport BoardForm from '../Modals/BoardForm';\r\n\r\nconst BoardLink: FC<{ board: Board }> = ({ board }) => {\r\n    const router = useRouter();\r\n    const isActive = router.query.boardId === board.uuid;\r\n\r\n    return (\r\n        <Link\r\n            href={`/board/${board.uuid}`}\r\n            className={`group mr-5 flex items-center rounded-r-full py-3.5 pl-3 text-base font-bold tracking-wide transition-all lg:pl-6  ${\r\n                isActive\r\n                    ? 'bg-primary text-white'\r\n                    : ' text-mid-grey hover:bg-grey-highlight hover:text-primary dark:hover:bg-white'\r\n            }`}\r\n        >\r\n            <BoardIcon\r\n                className={`mr-2 min-w-[1rem] ${isActive ? 'fill-white' : 'fill-mid-grey group-hover:fill-primary'}`}\r\n            />\r\n            <span className=\" overflow-hidden text-ellipsis whitespace-nowrap\">{board.name}</span>\r\n        </Link>\r\n    );\r\n};\r\n\r\nconst NewBoardButton: FC<React.ComponentProps<'button'> & { handleBoardSelect?: Function }> = (props) => {\r\n    const { className, handleBoardSelect, ...restProps } = props;\r\n    const router = useRouter();\r\n    const newBoard = useModal();\r\n    const NewBoardModal = newBoard.Component;\r\n\r\n    const { mutateBoards } = useBoardsContext();\r\n\r\n    const newBoardHandler = () => {\r\n        newBoard.toggle();\r\n    };\r\n\r\n    const handleNewBoardCreated = (newBoardUUID: string) => {\r\n        mutateBoards();\r\n        newBoard.close();\r\n        router.push(`/board/${newBoardUUID}`);\r\n        handleBoardSelect && handleBoardSelect();\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <button\r\n                onClick={newBoardHandler}\r\n                id=\"new-board-btn\"\r\n                className={`group flex items-center py-3.5 pl-3 font-bold tracking-wide text-primary transition-all hover:text-primary-light lg:pl-6 ${\r\n                    className ?? ''\r\n                }`}\r\n                {...restProps}\r\n            >\r\n                <BoardIcon className=\"mr-2 h-4 fill-primary group-hover:fill-primary-light\" />\r\n                <span>{props.children}</span>\r\n            </button>\r\n            <NewBoardModal>\r\n                <BoardForm formType=\"new\" onNewBoardCreated={handleNewBoardCreated} />\r\n            </NewBoardModal>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nconst BoardList: FC<{ handleBoardSelect?: Function }> = ({ handleBoardSelect }) => {\r\n    const boardSelectHandler = () => {\r\n        handleBoardSelect && handleBoardSelect();\r\n    };\r\n\r\n    const { boards, isLoading } = useBoardsContext();\r\n    return (\r\n        <div id=\"board-list\" className=\"flex flex-1 flex-col overflow-y-auto\">\r\n            {boards && (\r\n                <span\r\n                    id=\"board-count\"\r\n                    data-testid=\"board-count\"\r\n                    className=\"mb-5 px-3 text-xs uppercase tracking-[.2rem] text-mid-grey lg:px-6\"\r\n                >{`All Boards (${boards.length})`}</span>\r\n            )}\r\n            <ul\r\n                className={`max-h-[calc(100vh-25rem)] overflow-y-scroll ${\r\n                    boards && boards.length > 0 ? 'min-h-[4rem]' : ''\r\n                }`}\r\n            >\r\n                {boards?.map((board) => (\r\n                    <li key={board.uuid} onClick={boardSelectHandler}>\r\n                        <BoardLink board={board} />\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n            <NewBoardButton handleBoardSelect={handleBoardSelect} disabled={isLoading}>\r\n                {isLoading ? 'Loading boards...' : '+ Create New Board'}\r\n            </NewBoardButton>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default BoardList;\r\n"
        }
    ]
}