{
    "sourceFile": "src/app/(main)/(pages)/(kanban)/_components/Inputs/Inputs.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1745854863147,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1745854863147,
            "name": "Commit-0",
            "content": "import React, { FC, PropsWithChildren, useRef, useState } from 'react';\r\nimport { MultiInput, MultiInputChangeEvent, MultiInputFocusEvent } from '@/types';\r\nimport { ButtonSecondary } from '../Buttons/Buttons';\r\nimport Droppable from '../Drag-and-drop/Droppable';\r\nimport { Check, Chevron, Cross, DragIcon } from '../Icons/Icons';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport {\r\n    DndContext,\r\n    DragEndEvent,\r\n    MeasuringStrategy,\r\n    MouseSensor,\r\n    TouchSensor,\r\n    useSensor,\r\n    useSensors,\r\n} from '@dnd-kit/core';\r\nimport { SortableContext, useSortable, verticalListSortingStrategy } from '@dnd-kit/sortable';\r\nimport usePopover from '@/hooks/usePopover';\r\n\r\nconst ErrorMsg: FC<PropsWithChildren> = ({ children }) => {\r\n    return (\r\n        <span className=\"absolute right-3 -top-2.5 whitespace-nowrap bg-white px-1 text-sm text-danger dark:bg-dark-grey sm:top-2.5 sm:right-4\">\r\n            {children}\r\n        </span>\r\n    );\r\n};\r\n\r\nconst FormFieldLabel: FC<React.ComponentProps<'label'>> = (props) => {\r\n    const { className, ...labelProps } = props;\r\n    return (\r\n        <label\r\n            {...labelProps}\r\n            className={`pointer-events-none mb-2 text-sm text-mid-grey dark:text-white ${className ?? ''}`}\r\n        >\r\n            {props.children}\r\n        </label>\r\n    );\r\n};\r\n\r\nconst InputField: FC<React.ComponentProps<'input'> & { haserror?: boolean; errorMsg?: string }> = (props) => {\r\n    const { className, haserror, errorMsg, ...inputProps } = props;\r\n    return (\r\n        <div className=\"relative w-full\">\r\n            <input\r\n                {...inputProps}\r\n                className={`${\r\n                    haserror\r\n                        ? 'border-danger sm:pr-24'\r\n                        : 'border-mid-grey border-opacity-25 hover:border-primary focus:border-primary'\r\n                } h-10 min-h-fit w-full cursor-pointer rounded border-2   bg-transparent py-2 px-4 text-sm font-medium text-black placeholder-black placeholder-opacity-25 outline-none focus:placeholder-opacity-0 dark:text-white dark:placeholder-white dark:placeholder-opacity-25 ${\r\n                    className ?? ''\r\n                }`}\r\n            />\r\n            {haserror && errorMsg && <ErrorMsg>{errorMsg}</ErrorMsg>}\r\n        </div>\r\n    );\r\n};\r\n\r\nconst TextareaField: FC<\r\n    React.ComponentProps<'textarea'> & { haserror?: boolean; errorMsg?: string; small?: boolean }\r\n> = (props) => {\r\n    const { className, haserror, errorMsg, small, ...inputProps } = props;\r\n    return (\r\n        <div className=\"relative w-full\">\r\n            <textarea\r\n                {...inputProps}\r\n                className={`${\r\n                    haserror\r\n                        ? 'border-danger sm:pr-24'\r\n                        : 'border-mid-grey border-opacity-25 hover:border-primary focus:border-primary'\r\n                } ${\r\n                    small ? 'h-10' : 'h-28'\r\n                } w-full cursor-pointer rounded border-2   bg-transparent py-2 px-4 text-sm font-medium text-black placeholder-black placeholder-opacity-25 outline-none focus:placeholder-opacity-0 dark:text-white dark:placeholder-white dark:placeholder-opacity-25 ${\r\n                    className ?? ''\r\n                }`}\r\n            />\r\n            {haserror && errorMsg && <ErrorMsg>{errorMsg}</ErrorMsg>}\r\n        </div>\r\n    );\r\n};\r\n\r\nconst Input: FC<\r\n    React.ComponentProps<'input'> & { label: string; haserror?: boolean; errorMsg?: string; hideLabel?: boolean }\r\n> = (props) => {\r\n    const { label, className, hideLabel, ...inputProps } = props;\r\n    return (\r\n        <fieldset className={`flex flex-col text-mid-grey dark:text-white ${className ?? ''}`}>\r\n            <FormFieldLabel htmlFor={props.id} hidden={hideLabel}>\r\n                {props.label}\r\n            </FormFieldLabel>\r\n            <InputField {...inputProps} />\r\n        </fieldset>\r\n    );\r\n};\r\n\r\nconst Textarea: FC<\r\n    React.ComponentProps<'textarea'> & { label: string; haserror?: boolean; errorMsg?: string; small?: boolean }\r\n> = (props) => {\r\n    const { label, className, ...restProps } = props;\r\n    return (\r\n        <fieldset className={`flex flex-col text-mid-grey dark:text-white ${className ?? ''}`}>\r\n            <FormFieldLabel htmlFor={props.id}>{props.label}</FormFieldLabel>\r\n            <TextareaField {...restProps} />\r\n        </fieldset>\r\n    );\r\n};\r\n\r\nconst Dropdown: FC<\r\n    React.ComponentProps<'select'> & {\r\n        label?: string;\r\n        options: string[];\r\n        setValue: Function;\r\n        onValueSelected?: Function;\r\n    }\r\n> = (props) => {\r\n    const popover = usePopover();\r\n    const ulRef = useRef<HTMLUListElement>(null);\r\n    const selectRef = useRef<HTMLSelectElement>(null);\r\n    const PopoverEl = popover.Component;\r\n\r\n    const { label, value, className, setValue, onValueSelected, ...restProps } = props;\r\n\r\n    const handleSelectClick = (e: React.MouseEvent<HTMLElement>) => {\r\n        popover.toggle(e);\r\n    };\r\n\r\n    const onSelectChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\r\n        setValue(e.target.value);\r\n        onValueSelected && onValueSelected(e.target.value);\r\n    };\r\n\r\n    const handleOptionSelect = (e: React.MouseEvent<HTMLElement>) => {\r\n        const input = e.target as HTMLElement;\r\n        setValue(input.innerText);\r\n        onValueSelected && onValueSelected(input.innerText);\r\n        popover.close();\r\n    };\r\n\r\n    const handleSelectKeyDown = (e: React.KeyboardEvent<HTMLElement>) => {\r\n        if (e.key === 'Enter') {\r\n            popover.toggle(e);\r\n        } else if (e.key === 'ArrowDown') {\r\n            e.preventDefault();\r\n            popover.open(e);\r\n            ulRef.current?.querySelector('li')?.focus();\r\n        }\r\n    };\r\n\r\n    const handleOptionKeyDown = (e: React.KeyboardEvent<HTMLElement>) => {\r\n        const input = e.target as HTMLElement;\r\n        const next = input.nextElementSibling as HTMLElement;\r\n        const prev = input.previousElementSibling as HTMLElement;\r\n        const first = ulRef.current?.querySelector('li') as HTMLElement;\r\n        const last = ulRef.current?.querySelectorAll('li')?.[\r\n            ulRef.current?.querySelectorAll('li').length - 1\r\n        ] as HTMLElement;\r\n        if (e.key === 'Enter') {\r\n            setValue(input.innerText);\r\n            popover.close();\r\n            selectRef.current?.focus();\r\n        } else if (e.key === 'ArrowDown') {\r\n            e.preventDefault();\r\n            next?.focus();\r\n        } else if (e.key === 'ArrowUp') {\r\n            e.preventDefault();\r\n            prev?.focus();\r\n        } else if (e.key === 'Tab' || e.key === 'Escape') {\r\n            e.preventDefault();\r\n            popover.close();\r\n        } else if (e.key === 'Home') {\r\n            e.preventDefault();\r\n            first?.focus();\r\n        } else if (e.key === 'End') {\r\n            e.preventDefault();\r\n            last?.focus();\r\n        }\r\n    };\r\n\r\n    return (\r\n        <fieldset className={`flex flex-col text-mid-grey dark:text-white ${className ?? ''}`}>\r\n            {label && <FormFieldLabel htmlFor={props.id}>{props.label}</FormFieldLabel>}\r\n            <div className=\"relative\">\r\n                <select\r\n                    id={props.id}\r\n                    onChange={onSelectChange}\r\n                    onClick={handleSelectClick}\r\n                    onKeyDown={handleSelectKeyDown}\r\n                    value={value}\r\n                    {...restProps}\r\n                    className=\"h-10 w-full cursor-pointer appearance-none rounded border-2 border-mid-grey border-opacity-25 bg-transparent py-2 px-4 text-sm font-medium text-black placeholder-black placeholder-opacity-25 outline-none hover:border-primary focus:border-primary focus:placeholder-opacity-0 dark:text-white dark:text-inherit dark:placeholder-white dark:placeholder-opacity-25\"\r\n                >\r\n                    {props.options.map((option) => (\r\n                        <option key={option} value={option} className=\"hidden\">\r\n                            {option}\r\n                        </option>\r\n                    ))}\r\n                </select>\r\n                <Chevron\r\n                    className={`pointer-events-none absolute top-1/2 right-4 -translate-y-1/2 scale-125 transition-all`}\r\n                />\r\n                <PopoverEl anchorWidth={true}>\r\n                    <div className=\"absolute top-12 w-full rounded-md bg-white p-4 dark:bg-v-dark-grey\">\r\n                        <ul ref={ulRef} className=\"space-y-2\">\r\n                            {props.options.map((option) => (\r\n                                <li\r\n                                    role={'option'}\r\n                                    key={option}\r\n                                    onClick={handleOptionSelect}\r\n                                    onKeyDown={handleOptionKeyDown}\r\n                                    tabIndex={0}\r\n                                    className=\"cursor-pointer text-mid-grey hover:text-black focus:text-black focus:outline-none dark:hover:text-white dark:focus:text-white\"\r\n                                >\r\n                                    {option}\r\n                                </li>\r\n                            ))}\r\n                        </ul>\r\n                    </div>\r\n                </PopoverEl>\r\n            </div>\r\n        </fieldset>\r\n    );\r\n};\r\n\r\ntype MultiValueInputProps = React.ComponentProps<'fieldset'> & {\r\n    id?: string;\r\n    label: string;\r\n    changeHandler: Function;\r\n    placeholder?: string;\r\n    values?: MultiInput[];\r\n    draggable?: boolean;\r\n    addBtnText: string;\r\n    fieldType?: 'input' | 'textarea';\r\n    validationHandler: (val: string | undefined) => [boolean, string];\r\n};\r\n\r\nconst MultiValueInput: FC<MultiValueInputProps> = (props) => {\r\n    const fieldType = props.fieldType ?? 'input';\r\n    const values = props.values ?? [];\r\n    const setValues = props.changeHandler;\r\n    const [id, setId] = React.useState(uuidv4());\r\n    const [animateIn, setAnimateIn] = useState(false);\r\n\r\n    const mouseSensor = useSensor(MouseSensor, {\r\n        // Require the mouse to move by 10 pixels before activating\r\n        activationConstraint: {\r\n            distance: 10,\r\n        },\r\n    });\r\n    const touchSensor = useSensor(TouchSensor, {\r\n        activationConstraint: {\r\n            delay: 250,\r\n            tolerance: 10,\r\n        },\r\n    });\r\n\r\n    const sensors = useSensors(mouseSensor, touchSensor);\r\n\r\n    const handleInputChange = (e: MultiInputChangeEvent) => {\r\n        const { value, id } = e.target;\r\n        const newValues: MultiInput[] = values.map((item) => {\r\n            if (item.id === id) {\r\n                const [isValid, errorMsg] = props.validationHandler(value);\r\n                return { ...item, value, isValid, errorMsg, isTouched: true };\r\n            }\r\n            return item;\r\n        });\r\n        setValues(newValues);\r\n    };\r\n\r\n    const onNewColumn = () => {\r\n        setAnimateIn(true);\r\n        const newValues = [...values, { value: '', id: `${id}`, isValid: false, isTouched: false }];\r\n        setValues(newValues);\r\n        setId(uuidv4());\r\n        setTimeout(() => setAnimateIn(false), 250);\r\n    };\r\n\r\n    const handleDeleteInput = (e: React.MouseEvent<SVGSVGElement, MouseEvent>) => {\r\n        setAnimateIn(false);\r\n        const { id } = e.currentTarget;\r\n        setTimeout(() => {\r\n            const newValues = values.filter((item) => item.id !== id.replace('delete-', ''));\r\n            setValues(newValues);\r\n        }, 230);\r\n    };\r\n\r\n    const handleBlur = (e: MultiInputFocusEvent) => {\r\n        const { value, id } = e.target;\r\n        const newValues: MultiInput[] = values.map((item) => {\r\n            if (item.id === id) {\r\n                const [isValid, errorMsg] = props.validationHandler(value);\r\n                return { ...item, value, isValid, errorMsg, isTouched: true };\r\n            }\r\n            return item;\r\n        });\r\n        setValues(newValues);\r\n    };\r\n\r\n    const handleDragEnd = (event: DragEndEvent) => {\r\n        const { active, over } = event;\r\n        if (active.id !== over?.id) {\r\n            const newValues = [...values];\r\n            const oldIndex = values.findIndex((item) => item.id === active.id);\r\n            const newIndex = values.findIndex((item) => item.id === over?.id);\r\n            newValues.splice(newIndex, 0, newValues.splice(oldIndex, 1)[0]);\r\n            setValues(newValues);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className={props.className ?? ''}>\r\n            <DndContext\r\n                sensors={props.draggable ? sensors : []}\r\n                measuring={{\r\n                    droppable: {\r\n                        strategy: MeasuringStrategy.Always,\r\n                    },\r\n                }}\r\n                onDragEnd={handleDragEnd}\r\n                onDragStart={() => setAnimateIn(false)}\r\n            >\r\n                <Droppable droppableId={uuidv4()}>\r\n                    <fieldset className=\"flex flex-col overflow-x-visible\" id={props.id}>\r\n                        <FormFieldLabel htmlFor={props.id}>{props.label}</FormFieldLabel>\r\n                        <SortableContext items={values.map((val) => val.id)} strategy={verticalListSortingStrategy}>\r\n                            {values.map((item) => (\r\n                                <MultiInputRow\r\n                                    key={item.id}\r\n                                    id={item.id}\r\n                                    onChange={handleInputChange}\r\n                                    value={item.value}\r\n                                    placeholder={props.placeholder}\r\n                                    haserror={!item.isValid && item.isTouched}\r\n                                    errorMsg={item.errorMsg}\r\n                                    onBlur={handleBlur}\r\n                                    onDelete={handleDeleteInput}\r\n                                    showHandle={props.draggable && values.length > 1}\r\n                                    animateIn={animateIn}\r\n                                    fieldType={fieldType}\r\n                                />\r\n                            ))}\r\n                        </SortableContext>\r\n                    </fieldset>\r\n                </Droppable>\r\n                <ButtonSecondary id={props.id ? `${props.id}-add` : undefined} type=\"button\" onClick={onNewColumn}>\r\n                    {props.addBtnText}\r\n                </ButtonSecondary>\r\n            </DndContext>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst MultiInputRow: FC<{\r\n    id: string;\r\n    onChange: (e: MultiInputChangeEvent) => void;\r\n    value: string;\r\n    placeholder?: string;\r\n    haserror?: boolean;\r\n    errorMsg?: string;\r\n    onBlur: (e: MultiInputFocusEvent) => void;\r\n    onDelete: (e: React.MouseEvent<SVGSVGElement, MouseEvent>) => void;\r\n    showHandle?: boolean;\r\n    animateIn?: boolean;\r\n    fieldType: 'input' | 'textarea';\r\n}> = (props) => {\r\n    const { attributes, listeners, setNodeRef, transform, transition, setActivatorNodeRef } = useSortable({\r\n        id: props.id,\r\n    });\r\n    const { role, tabIndex, ...restAttributes } = attributes; // Do not set role and tabIndex to keep the input accessible\r\n\r\n    const [isDeleting, setIsDeleting] = useState(false);\r\n    const style = transform\r\n        ? {\r\n              transform: `translate3d(${transform.x}px, ${transform.y}px, 0)`,\r\n              transition,\r\n          }\r\n        : undefined;\r\n\r\n    const handleDelete = (e: React.MouseEvent<SVGSVGElement, MouseEvent>) => {\r\n        setIsDeleting(true);\r\n        props.onDelete(e);\r\n    };\r\n\r\n    const inputProps = {\r\n        id: props.id,\r\n        onChange: props.onChange,\r\n        className: 'w-full',\r\n        value: props.value,\r\n        placeholder: props.placeholder,\r\n        haserror: props.haserror,\r\n        errorMsg: props.errorMsg,\r\n        onBlur: props.onBlur,\r\n        'data-testid': 'multi-input-field',\r\n    };\r\n\r\n    return (\r\n        <div\r\n            ref={setNodeRef}\r\n            style={style}\r\n            {...restAttributes}\r\n            className={`mb-3 flex items-center ${\r\n                isDeleting ? 'animate-collapse-input' : props.animateIn ? 'last:animate-expand-input' : ''\r\n            }`}\r\n        >\r\n            {props.fieldType === 'input' ? (\r\n                <InputField {...inputProps} />\r\n            ) : (\r\n                <TextareaField {...inputProps} small={true} />\r\n            )}\r\n            <Cross\r\n                id={`delete-${props.id}`}\r\n                onClick={handleDelete}\r\n                className=\"ml-4 w-5 cursor-pointer fill-mid-grey transition-colors hover:fill-red-500\"\r\n                data-testid=\"multi-input-delete\"\r\n            />\r\n            {props.showHandle && (\r\n                <i ref={setActivatorNodeRef} {...listeners}>\r\n                    <DragIcon className=\"ml-4 w-5 cursor-grab active:cursor-grabbing\" data-testid=\"multi-input-drag\" />\r\n                </i>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nconst Checkbox = React.forwardRef<HTMLInputElement, React.ComponentProps<'input'> & { checked?: boolean }>(\r\n    ({ checked, id, ...props }, ref) => {\r\n        const changeHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n            props.onChange && props.onChange(e);\r\n        };\r\n        return (\r\n            <>\r\n                <input\r\n                    ref={ref}\r\n                    id={id}\r\n                    checked={checked}\r\n                    type=\"checkbox\"\r\n                    className=\"hidden\"\r\n                    onChange={changeHandler}\r\n                />\r\n                <label\r\n                    htmlFor={id}\r\n                    className={`relative flex aspect-square min-w-[1rem] cursor-pointer items-center justify-center overflow-hidden rounded border border-mid-grey border-opacity-25 bg-white transition-all dark:bg-v-dark-grey ${props.className}`}\r\n                >\r\n                    <div\r\n                        className={`absolute z-0 h-full w-full -translate-x-2 translate-y-2 rounded-full bg-primary transition-all ${\r\n                            checked ? 'scale-[3]' : 'scale-0'\r\n                        }`}\r\n                    />\r\n                    <Check className={`z-10 transition-opacity ${checked ? 'opacity-100' : 'opacity-0'}`} />\r\n                </label>\r\n            </>\r\n        );\r\n    }\r\n);\r\nCheckbox.displayName = 'Checkbox';\r\n\r\nexport { Input, MultiValueInput, Textarea, Dropdown, Checkbox };\r\n"
        }
    ]
}