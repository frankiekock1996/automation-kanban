{
    "sourceFile": "src/app/(main)/(pages)/(kanban)/_components/Board/Board.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1745855544630,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1745884933513,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,404 @@\n+import { FC, useEffect, useRef, useState } from \"react\";\r\n+import Column from \"./Column/Column\";\r\n+import {\r\n+  DragStartEvent,\r\n+  DragEndEvent,\r\n+  DragOverEvent,\r\n+  closestCorners\r\n+} from \"@dnd-kit/core\";\r\n+import {\r\n+  DndContext,\r\n+  useSensor,\r\n+  useSensors,\r\n+  MouseSensor,\r\n+  TouchSensor,\r\n+  MeasuringStrategy,\r\n+  UniqueIdentifier\r\n+} from \"@dnd-kit/core\";\r\n+import { arrayMove } from \"@dnd-kit/sortable\";\r\n+import { Board as BoardT, Columns, Task } from \"@/types\";\r\n+import { fetcher, randomHexColor } from \"@/utils/utils\";\r\n+import useSWR from \"swr\";\r\n+import useInput from \"@/hooks/useInput\";\r\n+import BoardForm from \"../Modals/BoardForm\";\r\n+import useModal from \"@/hooks/useModal\";\r\n+import { PopoverLink } from \"../Popover/Popover\";\r\n+import usePopover from \"@/hooks/usePopover\";\r\n+import TaskForm from \"../Modals/TaskForm\";\r\n+import TaskDetails from \"../Modals/TaskDetails\";\r\n+import Link from \"next/link\";\r\n+const validateColumn = (value: string): [boolean, string] => {\r\n+  if (!value || value.trim().length < 1) return [false, \"Can't be empty\"];\r\n+  if (value.trim().length > 20) return [false, `${value.trim().length}/20`];\r\n+  return [true, \"\"];\r\n+};\r\n+\r\n+const NewColumnBar: FC<{\r\n+  mutateBoard: Function;\r\n+  boardUUID: string;\r\n+}> = ({ mutateBoard, boardUUID }) => {\r\n+  const inputRef = useRef<HTMLInputElement>(null);\r\n+  const inputHandler = useInput<string>({ validateFn: validateColumn });\r\n+  const submitHandler = (e: React.FormEvent<HTMLFormElement>) => {\r\n+    e.preventDefault();\r\n+    if (!inputHandler.isValid) {\r\n+      inputHandler.setIsTouched(true);\r\n+      return;\r\n+    }\r\n+    const columnData = {\r\n+      board_uuid: boardUUID,\r\n+      name: inputHandler.value!.trim(),\r\n+      color: randomHexColor()\r\n+    };\r\n+    fetch(\"/api/columns\", {\r\n+      method: \"POST\",\r\n+      headers: {\r\n+        \"Content-Type\": \"application/json\"\r\n+      },\r\n+      body: JSON.stringify(columnData)\r\n+    }).then(() => {\r\n+      inputRef.current?.blur();\r\n+      inputHandler.setIsTouched(false);\r\n+      inputHandler.setValue(\"\");\r\n+      mutateBoard();\r\n+    });\r\n+  };\r\n+\r\n+  return (\r\n+    <div className=\"relative mt-10 w-72\">\r\n+      <form\r\n+        onSubmit={submitHandler}\r\n+        className={`sticky top-10 flex h-[80vh] max-h-[calc(100vh-260px)] w-72 items-center justify-center rounded-md bg-gradient-to-b from-[#E9EFFA] to-[#e9effa80] text-center text-2xl font-bold text-mid-grey transition-all dark:from-[#2b2c3740] dark:to-[#2b2c3720]`}\r\n+      >\r\n+        <fieldset className=\"relative\">\r\n+          <input\r\n+            ref={inputRef}\r\n+            value={inputHandler.value ?? \"\"}\r\n+            onChange={inputHandler.valueChangeHandler}\r\n+            onBlur={inputHandler.inputBlurHandler}\r\n+            id=\"new-column\"\r\n+            type=\"text\"\r\n+            className=\"peer absolute w-56 -translate-x-1/2 bg-transparent py-1 text-center text-lg text-black caret-primary-light opacity-0 transition-all hover:outline-none focus:opacity-100 focus:outline-none dark:text-white\"\r\n+          />\r\n+          <div\r\n+            className={`absolute h-[3px] w-56 -translate-x-1/2 translate-y-10 scale-x-0 rounded transition-all peer-focus:scale-x-100 ${\r\n+              inputHandler.hasError ? \"bg-danger\" : \"bg-primary \"\r\n+            }`}\r\n+          />\r\n+          {inputHandler.hasError && (\r\n+            <span className=\"absolute top-12 hidden min-w-max -translate-x-1/2 text-sm text-danger peer-focus:block\">\r\n+              {inputHandler.errorMsg}\r\n+            </span>\r\n+          )}\r\n+          <label\r\n+            htmlFor=\"new-column\"\r\n+            className=\"absolute z-10 w-56 -translate-x-1/2 cursor-pointer transition-all hover:text-primary peer-focus:-translate-y-12 peer-focus:scale-75 peer-focus:text-primary\"\r\n+          >\r\n+            + New Column\r\n+          </label>\r\n+        </fieldset>\r\n+      </form>\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+const Board: FC<{ boardUUID: string }> = (props) => {\r\n+  const boardData = useSWR<BoardT>(\r\n+    `/api/boards/${props.boardUUID}`,\r\n+    fetcher,\r\n+    {}\r\n+  );\r\n+  const [selectedTask, setSelectedTask] = useState<any | null>(null);\r\n+  const sortedColumns = boardData.data?.columns.sort(\r\n+    (a, b) => a.position - b.position\r\n+  );\r\n+  const editBoardModal = useModal();\r\n+  const EditBoardModal = editBoardModal.Component;\r\n+  const newTaskModal = useModal();\r\n+  const NewTaskModal = newTaskModal.Component;\r\n+  const editTaskModal = useModal();\r\n+  const EditTaskModal = editTaskModal.Component;\r\n+  const [items, setItems] = useState<Columns>({});\r\n+  const [clonedItems, setClonedItems] = useState<Columns | null>(items);\r\n+  const [activeId, setActiveId] = useState<UniqueIdentifier | null>(null);\r\n+  const [draggedTask, setDraggedTask] = useState<Task | null>(null);\r\n+  const { Component: Popover, ...optionsPopover } = usePopover();\r\n+  const handleNewTask = () => {\r\n+    newTaskModal.toggle();\r\n+  };\r\n+  useEffect(() => {\r\n+    const newValue: Columns = {};\r\n+    if (!boardData.data) return;\r\n+    for (const column of boardData.data.columns) {\r\n+      newValue[column.name] = {\r\n+        board_uuid: column.board_uuid,\r\n+        position: column.position,\r\n+        uuid: column.uuid,\r\n+        color: column.color,\r\n+        tasks: column.tasks ?? []\r\n+      };\r\n+    }\r\n+    setItems(newValue);\r\n+  }, [boardData.data?.columns, boardData.error]);\r\n+\r\n+  const mouseSensor = useSensor(MouseSensor, {\r\n+    // Require the mouse to move by 10 pixels before activating\r\n+    activationConstraint: {\r\n+      distance: 10\r\n+    }\r\n+  });\r\n+  const touchSensor = useSensor(TouchSensor, {\r\n+    activationConstraint: {\r\n+      delay: 250,\r\n+      tolerance: 10\r\n+    }\r\n+  });\r\n+\r\n+  const sensors = useSensors(mouseSensor, touchSensor);\r\n+\r\n+  function findContainer(id: UniqueIdentifier, items: Columns | null) {\r\n+    if (!items) return null;\r\n+    if (id in items) {\r\n+      return id;\r\n+    }\r\n+\r\n+    return Object.keys(items).find((key) =>\r\n+      items[key].tasks.some((task) => task.uuid === id)\r\n+    );\r\n+  }\r\n+\r\n+  function handleDragStart(event: DragStartEvent) {\r\n+    const { active } = event;\r\n+    const { id } = active;\r\n+    const startingContainer = findContainer(id, items);\r\n+    const taskObject =\r\n+      startingContainer &&\r\n+      items[startingContainer].tasks.find((task) => task.uuid === id);\r\n+    if (taskObject) {\r\n+      setDraggedTask(taskObject);\r\n+      setActiveId(id);\r\n+      setClonedItems(items);\r\n+    } else {\r\n+      return;\r\n+    }\r\n+  }\r\n+\r\n+  function handleDragOver(event: DragOverEvent) {\r\n+    const { active, over } = event;\r\n+    const { id } = active;\r\n+    const overId = over?.id;\r\n+    if (!overId) return;\r\n+\r\n+    // Find the containers\r\n+    const activeContainer = findContainer(id, items);\r\n+    const overContainer = findContainer(overId, items);\r\n+\r\n+    if (\r\n+      !activeContainer ||\r\n+      !overContainer ||\r\n+      activeContainer === overContainer\r\n+    ) {\r\n+      return;\r\n+    }\r\n+\r\n+    setItems((prev) => {\r\n+      const activeItems = prev[activeContainer].tasks;\r\n+      const overItems = prev[overContainer].tasks;\r\n+\r\n+      // Find the indexes for the items\r\n+      const activeIndex = activeItems\r\n+        .map((task) => task.uuid as UniqueIdentifier)\r\n+        .indexOf(id);\r\n+      const overIndex = overItems\r\n+        .map((task) => task.uuid as UniqueIdentifier)\r\n+        .indexOf(overId);\r\n+\r\n+      let newIndex;\r\n+      if (overId in prev) {\r\n+        // We're at the root droppable of a container\r\n+        newIndex = overItems.length + 1;\r\n+      } else {\r\n+        const isBelowLastItem = over && overIndex === overItems.length - 1;\r\n+        const modifier = isBelowLastItem ? 1 : 0;\r\n+\r\n+        newIndex = overIndex >= 0 ? overIndex + modifier : overItems.length + 1;\r\n+      }\r\n+\r\n+      return {\r\n+        ...prev,\r\n+        [activeContainer]: {\r\n+          ...prev[activeContainer],\r\n+          tasks: [\r\n+            ...prev[activeContainer].tasks.filter(\r\n+              (task) => task.uuid !== active.id\r\n+            )\r\n+          ]\r\n+        },\r\n+        [overContainer]: {\r\n+          ...prev[overContainer],\r\n+          tasks: [\r\n+            ...prev[overContainer].tasks.slice(0, newIndex),\r\n+            items[activeContainer].tasks[activeIndex],\r\n+            ...prev[overContainer].tasks.slice(\r\n+              newIndex,\r\n+              prev[overContainer].tasks.length\r\n+            )\r\n+          ]\r\n+        }\r\n+      };\r\n+    });\r\n+  }\r\n+\r\n+  function handleDragEnd(event: DragEndEvent) {\r\n+    const { active, over } = event;\r\n+    const { id } = active;\r\n+    const overId = over?.id;\r\n+    if (!overId || !clonedItems || !activeId) return;\r\n+\r\n+    const activeContainer = findContainer(id, items);\r\n+    const overContainer = findContainer(overId, items);\r\n+    const startingContainer = findContainer(activeId, clonedItems);\r\n+\r\n+    if (!activeContainer || !overContainer || !startingContainer) {\r\n+      return;\r\n+    }\r\n+\r\n+    const startingIndex = clonedItems[startingContainer].tasks\r\n+      .map((task) => task.uuid as UniqueIdentifier)\r\n+      .indexOf(activeId);\r\n+    const activeIndex = items[activeContainer].tasks\r\n+      .map((task) => task.uuid as UniqueIdentifier)\r\n+      .indexOf(id);\r\n+    const overIndex = items[overContainer].tasks\r\n+      .map((task) => task.uuid as UniqueIdentifier)\r\n+      .indexOf(overId);\r\n+\r\n+    if (activeIndex !== overIndex) {\r\n+      setItems((items) => ({\r\n+        ...items,\r\n+        [overContainer]: {\r\n+          ...items[overContainer],\r\n+          tasks: arrayMove(items[overContainer].tasks, activeIndex, overIndex)\r\n+        }\r\n+      }));\r\n+    }\r\n+    if (activeId && clonedItems && draggedTask) {\r\n+      const dragData = {\r\n+        overIndex:\r\n+          overIndex !== -1 ? overIndex : items[overContainer].tasks.length - 1,\r\n+        overContainer: items[overContainer].uuid\r\n+      };\r\n+      // Update the task if it was moved to a different container or index\r\n+      if (startingContainer === overContainer && startingIndex === overIndex) {\r\n+        boardData.mutate();\r\n+      } else {\r\n+        fetch(`/api/tasks/${draggedTask.uuid}`, {\r\n+          method: \"PUT\",\r\n+          headers: {\r\n+            \"Content-Type\": \"application/json\"\r\n+          },\r\n+          body: JSON.stringify({\r\n+            column_uuid: dragData.overContainer,\r\n+            position: dragData.overIndex\r\n+          })\r\n+        }).then(() => {\r\n+          boardData.mutate();\r\n+        });\r\n+      }\r\n+    }\r\n+    setClonedItems(null);\r\n+    setActiveId(null);\r\n+  }\r\n+  const handleEditBoard = () => {\r\n+    editBoardModal.open();\r\n+  };\r\n+  const handleBoardUpdate = () => {\r\n+    editBoardModal.close();\r\n+    boardData.mutate();\r\n+  };\r\n+  function handleEditTask(task: any) {\r\n+    setSelectedTask(task);\r\n+    editTaskModal.open();\r\n+  }\r\n+  return (\r\n+    <div className=\"flex flex-col relative h-full\">\r\n+      <h1 className=\"text-4xl sticky top-0 z-[10] p-6 bg-background/50 backdrop-blur-lg flex items-center border-b justify-between\">\r\n+        {boardData.data?.name}\r\n+        <div className=\" flex gap-6\">\r\n+          <PopoverLink onClick={() => {}} id=\"board-edit\">\r\n+            <Link href={`/workflows/editor/${props.boardUUID}`}>Editor</Link>\r\n+          </PopoverLink>\r\n+\r\n+          <PopoverLink onClick={handleNewTask} id=\"board-edit\">\r\n+            Add Task\r\n+          </PopoverLink>\r\n+          <PopoverLink onClick={handleEditBoard} id=\"board-edit\">\r\n+            Edit Board\r\n+          </PopoverLink>\r\n+        </div>\r\n+      </h1>\r\n+      <div className=\"p-6 overflow-scroll flex-1\">\r\n+        <section className=\"grid h-full w-fit auto-cols-min grid-flow-col gap-6\">\r\n+          <DndContext\r\n+            sensors={sensors}\r\n+            measuring={{\r\n+              droppable: {\r\n+                strategy: MeasuringStrategy.Always\r\n+              }\r\n+            }}\r\n+            collisionDetection={closestCorners}\r\n+            onDragStart={handleDragStart}\r\n+            onDragOver={handleDragOver}\r\n+            onDragEnd={handleDragEnd}\r\n+          >\r\n+            {items &&\r\n+              Object.entries(items)\r\n+                .sort(([_col, a], [_col2, b]) => a.position - b.position)\r\n+                .map(([colName, colData]) => {\r\n+                  return (\r\n+                    <Column\r\n+                      key={colName}\r\n+                      name={colName}\r\n+                      columnData={colData}\r\n+                      onTaskClick={handleEditTask}\r\n+                    />\r\n+                  );\r\n+                })}\r\n+            {boardData.data && (\r\n+              <NewColumnBar\r\n+                boardUUID={boardData.data.uuid}\r\n+                mutateBoard={boardData.mutate}\r\n+              />\r\n+            )}\r\n+          </DndContext>\r\n+        </section>\r\n+      </div>\r\n+      <EditBoardModal>\r\n+        <BoardForm\r\n+          formType=\"edit\"\r\n+          boardData={boardData.data}\r\n+          onBoardUpdated={handleBoardUpdate}\r\n+        />\r\n+      </EditBoardModal>\r\n+      <NewTaskModal>\r\n+        <TaskForm\r\n+          formType=\"new\"\r\n+          closeModal={newTaskModal.close}\r\n+          columns={sortedColumns}\r\n+        />\r\n+      </NewTaskModal>\r\n+      <EditTaskModal>\r\n+        {boardData.data && selectedTask && (\r\n+          <TaskDetails\r\n+            closeModal={editTaskModal.close}\r\n+            taskUUID={selectedTask.uuid!}\r\n+            columns={boardData.data.columns}\r\n+            board={boardData}\r\n+          />\r\n+        )}\r\n+      </EditTaskModal>\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default Board;\r\n"
                }
            ],
            "date": 1745855544630,
            "name": "Commit-0",
            "content": "import { FC, useEffect, useRef, useState } from \"react\";\r\nimport Column from \"./Column/Column\";\r\nimport {\r\n  DragStartEvent,\r\n  DragEndEvent,\r\n  DragOverEvent,\r\n  closestCorners\r\n} from \"@dnd-kit/core\";\r\nimport {\r\n  DndContext,\r\n  useSensor,\r\n  useSensors,\r\n  MouseSensor,\r\n  TouchSensor,\r\n  MeasuringStrategy,\r\n  UniqueIdentifier\r\n} from \"@dnd-kit/core\";\r\nimport { arrayMove } from \"@dnd-kit/sortable\";\r\nimport { Board as BoardT, Columns, Task } from \"@/types\";\r\nimport { fetcher, randomHexColor } from \"@/utils/utils\";\r\nimport useSWR from \"swr\";\r\nimport useInput from \"@/hooks/useInput\";\r\nimport BoardForm from \"../Modals/BoardForm\";\r\nimport useModal from \"@/hooks/useModal\";\r\nimport { PopoverLink } from \"../Popover/Popover\";\r\nimport usePopover from \"@/hooks/usePopover\";\r\nimport TaskForm from \"../Modals/TaskForm\";\r\nimport TaskDetails from \"../Modals/TaskDetails\";\r\nimport Link from \"next/link\";\r\nconst validateColumn = (value: string): [boolean, string] => {\r\n  if (!value || value.trim().length < 1) return [false, \"Can't be empty\"];\r\n  if (value.trim().length > 20) return [false, `${value.trim().length}/20`];\r\n  return [true, \"\"];\r\n};\r\n\r\nconst NewColumnBar: FC<{\r\n  mutateBoard: Function;\r\n  boardUUID: string;\r\n}> = ({ mutateBoard, boardUUID }) => {\r\n  const inputRef = useRef<HTMLInputElement>(null);\r\n  const inputHandler = useInput<string>({ validateFn: validateColumn });\r\n  const submitHandler = (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    if (!inputHandler.isValid) {\r\n      inputHandler.setIsTouched(true);\r\n      return;\r\n    }\r\n    const columnData = {\r\n      board_uuid: boardUUID,\r\n      name: inputHandler.value!.trim(),\r\n      color: randomHexColor()\r\n    };\r\n    fetch(\"/api/columns\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify(columnData)\r\n    }).then(() => {\r\n      inputRef.current?.blur();\r\n      inputHandler.setIsTouched(false);\r\n      inputHandler.setValue(\"\");\r\n      mutateBoard();\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"relative mt-10 w-72\">\r\n      <form\r\n        onSubmit={submitHandler}\r\n        className={`sticky top-10 flex h-[80vh] max-h-[calc(100vh-260px)] w-72 items-center justify-center rounded-md bg-gradient-to-b from-[#E9EFFA] to-[#e9effa80] text-center text-2xl font-bold text-mid-grey transition-all dark:from-[#2b2c3740] dark:to-[#2b2c3720]`}\r\n      >\r\n        <fieldset className=\"relative\">\r\n          <input\r\n            ref={inputRef}\r\n            value={inputHandler.value ?? \"\"}\r\n            onChange={inputHandler.valueChangeHandler}\r\n            onBlur={inputHandler.inputBlurHandler}\r\n            id=\"new-column\"\r\n            type=\"text\"\r\n            className=\"peer absolute w-56 -translate-x-1/2 bg-transparent py-1 text-center text-lg text-black caret-primary-light opacity-0 transition-all hover:outline-none focus:opacity-100 focus:outline-none dark:text-white\"\r\n          />\r\n          <div\r\n            className={`absolute h-[3px] w-56 -translate-x-1/2 translate-y-10 scale-x-0 rounded transition-all peer-focus:scale-x-100 ${\r\n              inputHandler.hasError ? \"bg-danger\" : \"bg-primary \"\r\n            }`}\r\n          />\r\n          {inputHandler.hasError && (\r\n            <span className=\"absolute top-12 hidden min-w-max -translate-x-1/2 text-sm text-danger peer-focus:block\">\r\n              {inputHandler.errorMsg}\r\n            </span>\r\n          )}\r\n          <label\r\n            htmlFor=\"new-column\"\r\n            className=\"absolute z-10 w-56 -translate-x-1/2 cursor-pointer transition-all hover:text-primary peer-focus:-translate-y-12 peer-focus:scale-75 peer-focus:text-primary\"\r\n          >\r\n            + New Column\r\n          </label>\r\n        </fieldset>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst Board: FC<{ boardUUID: string }> = (props) => {\r\n  const boardData = useSWR<BoardT>(\r\n    `/api/boards/${props.boardUUID}`,\r\n    fetcher,\r\n    {}\r\n  );\r\n  const [selectedTask, setSelectedTask] = useState<any | null>(null);\r\n  const sortedColumns = boardData.data?.columns.sort(\r\n    (a, b) => a.position - b.position\r\n  );\r\n  const editBoardModal = useModal();\r\n  const EditBoardModal = editBoardModal.Component;\r\n  const newTaskModal = useModal();\r\n  const NewTaskModal = newTaskModal.Component;\r\n  const editTaskModal = useModal();\r\n  const EditTaskModal = editTaskModal.Component;\r\n  const [items, setItems] = useState<Columns>({});\r\n  const [clonedItems, setClonedItems] = useState<Columns | null>(items);\r\n  const [activeId, setActiveId] = useState<UniqueIdentifier | null>(null);\r\n  const [draggedTask, setDraggedTask] = useState<Task | null>(null);\r\n  const { Component: Popover, ...optionsPopover } = usePopover();\r\n  const handleNewTask = () => {\r\n    newTaskModal.toggle();\r\n  };\r\n  useEffect(() => {\r\n    const newValue: Columns = {};\r\n    if (!boardData.data) return;\r\n    for (const column of boardData.data.columns) {\r\n      newValue[column.name] = {\r\n        board_uuid: column.board_uuid,\r\n        position: column.position,\r\n        uuid: column.uuid,\r\n        color: column.color,\r\n        tasks: column.tasks ?? []\r\n      };\r\n    }\r\n    setItems(newValue);\r\n  }, [boardData.data?.columns, boardData.error]);\r\n\r\n  const mouseSensor = useSensor(MouseSensor, {\r\n    // Require the mouse to move by 10 pixels before activating\r\n    activationConstraint: {\r\n      distance: 10\r\n    }\r\n  });\r\n  const touchSensor = useSensor(TouchSensor, {\r\n    activationConstraint: {\r\n      delay: 250,\r\n      tolerance: 10\r\n    }\r\n  });\r\n\r\n  const sensors = useSensors(mouseSensor, touchSensor);\r\n\r\n  function findContainer(id: UniqueIdentifier, items: Columns | null) {\r\n    if (!items) return null;\r\n    if (id in items) {\r\n      return id;\r\n    }\r\n\r\n    return Object.keys(items).find((key) =>\r\n      items[key].tasks.some((task) => task.uuid === id)\r\n    );\r\n  }\r\n\r\n  function handleDragStart(event: DragStartEvent) {\r\n    const { active } = event;\r\n    const { id } = active;\r\n    const startingContainer = findContainer(id, items);\r\n    const taskObject =\r\n      startingContainer &&\r\n      items[startingContainer].tasks.find((task) => task.uuid === id);\r\n    if (taskObject) {\r\n      setDraggedTask(taskObject);\r\n      setActiveId(id);\r\n      setClonedItems(items);\r\n    } else {\r\n      return;\r\n    }\r\n  }\r\n\r\n  function handleDragOver(event: DragOverEvent) {\r\n    const { active, over } = event;\r\n    const { id } = active;\r\n    const overId = over?.id;\r\n    if (!overId) return;\r\n\r\n    // Find the containers\r\n    const activeContainer = findContainer(id, items);\r\n    const overContainer = findContainer(overId, items);\r\n\r\n    if (\r\n      !activeContainer ||\r\n      !overContainer ||\r\n      activeContainer === overContainer\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    setItems((prev) => {\r\n      const activeItems = prev[activeContainer].tasks;\r\n      const overItems = prev[overContainer].tasks;\r\n\r\n      // Find the indexes for the items\r\n      const activeIndex = activeItems\r\n        .map((task) => task.uuid as UniqueIdentifier)\r\n        .indexOf(id);\r\n      const overIndex = overItems\r\n        .map((task) => task.uuid as UniqueIdentifier)\r\n        .indexOf(overId);\r\n\r\n      let newIndex;\r\n      if (overId in prev) {\r\n        // We're at the root droppable of a container\r\n        newIndex = overItems.length + 1;\r\n      } else {\r\n        const isBelowLastItem = over && overIndex === overItems.length - 1;\r\n        const modifier = isBelowLastItem ? 1 : 0;\r\n\r\n        newIndex = overIndex >= 0 ? overIndex + modifier : overItems.length + 1;\r\n      }\r\n\r\n      return {\r\n        ...prev,\r\n        [activeContainer]: {\r\n          ...prev[activeContainer],\r\n          tasks: [\r\n            ...prev[activeContainer].tasks.filter(\r\n              (task) => task.uuid !== active.id\r\n            )\r\n          ]\r\n        },\r\n        [overContainer]: {\r\n          ...prev[overContainer],\r\n          tasks: [\r\n            ...prev[overContainer].tasks.slice(0, newIndex),\r\n            items[activeContainer].tasks[activeIndex],\r\n            ...prev[overContainer].tasks.slice(\r\n              newIndex,\r\n              prev[overContainer].tasks.length\r\n            )\r\n          ]\r\n        }\r\n      };\r\n    });\r\n  }\r\n\r\n  function handleDragEnd(event: DragEndEvent) {\r\n    const { active, over } = event;\r\n    const { id } = active;\r\n    const overId = over?.id;\r\n    if (!overId || !clonedItems || !activeId) return;\r\n\r\n    const activeContainer = findContainer(id, items);\r\n    const overContainer = findContainer(overId, items);\r\n    const startingContainer = findContainer(activeId, clonedItems);\r\n\r\n    if (!activeContainer || !overContainer || !startingContainer) {\r\n      return;\r\n    }\r\n\r\n    const startingIndex = clonedItems[startingContainer].tasks\r\n      .map((task) => task.uuid as UniqueIdentifier)\r\n      .indexOf(activeId);\r\n    const activeIndex = items[activeContainer].tasks\r\n      .map((task) => task.uuid as UniqueIdentifier)\r\n      .indexOf(id);\r\n    const overIndex = items[overContainer].tasks\r\n      .map((task) => task.uuid as UniqueIdentifier)\r\n      .indexOf(overId);\r\n\r\n    if (activeIndex !== overIndex) {\r\n      setItems((items) => ({\r\n        ...items,\r\n        [overContainer]: {\r\n          ...items[overContainer],\r\n          tasks: arrayMove(items[overContainer].tasks, activeIndex, overIndex)\r\n        }\r\n      }));\r\n    }\r\n    if (activeId && clonedItems && draggedTask) {\r\n      const dragData = {\r\n        overIndex:\r\n          overIndex !== -1 ? overIndex : items[overContainer].tasks.length - 1,\r\n        overContainer: items[overContainer].uuid\r\n      };\r\n      // Update the task if it was moved to a different container or index\r\n      if (startingContainer === overContainer && startingIndex === overIndex) {\r\n        boardData.mutate();\r\n      } else {\r\n        fetch(`/api/tasks/${draggedTask.uuid}`, {\r\n          method: \"PUT\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\"\r\n          },\r\n          body: JSON.stringify({\r\n            column_uuid: dragData.overContainer,\r\n            position: dragData.overIndex\r\n          })\r\n        }).then(() => {\r\n          boardData.mutate();\r\n        });\r\n      }\r\n    }\r\n    setClonedItems(null);\r\n    setActiveId(null);\r\n  }\r\n  const handleEditBoard = () => {\r\n    editBoardModal.open();\r\n  };\r\n  const handleBoardUpdate = () => {\r\n    editBoardModal.close();\r\n    boardData.mutate();\r\n  };\r\n  function handleEditTask(task: any) {\r\n    setSelectedTask(task);\r\n    editTaskModal.open();\r\n  }\r\n  return (\r\n    <div className=\"flex flex-col relative h-full\">\r\n      <h1 className=\"text-4xl sticky top-0 z-[10] p-6 bg-background/50 backdrop-blur-lg flex items-center border-b justify-between\">\r\n        {boardData.data?.name}\r\n        <div className=\" flex gap-6\">\r\n          <PopoverLink onClick={() => {}} id=\"board-edit\">\r\n            <Link href={`/workflows/editor/${props.boardUUID}`}>Editor</Link>\r\n          </PopoverLink>\r\n\r\n          <PopoverLink onClick={handleNewTask} id=\"board-edit\">\r\n            Add Task\r\n          </PopoverLink>\r\n          <PopoverLink onClick={handleEditBoard} id=\"board-edit\">\r\n            Edit Board\r\n          </PopoverLink>\r\n        </div>\r\n      </h1>\r\n      <div className=\"p-6 overflow-scroll flex-1\">\r\n        <section className=\"grid h-full w-fit auto-cols-min grid-flow-col gap-6\">\r\n          <DndContext\r\n            sensors={sensors}\r\n            measuring={{\r\n              droppable: {\r\n                strategy: MeasuringStrategy.Always\r\n              }\r\n            }}\r\n            collisionDetection={closestCorners}\r\n            onDragStart={handleDragStart}\r\n            onDragOver={handleDragOver}\r\n            onDragEnd={handleDragEnd}\r\n          >\r\n            {items &&\r\n              Object.entries(items)\r\n                .sort(([_col, a], [_col2, b]) => a.position - b.position)\r\n                .map(([colName, colData]) => {\r\n                  return (\r\n                    <Column\r\n                      key={colName}\r\n                      name={colName}\r\n                      columnData={colData}\r\n                      onTaskClick={handleEditTask}\r\n                    />\r\n                  );\r\n                })}\r\n            {boardData.data && (\r\n              <NewColumnBar\r\n                boardUUID={boardData.data.uuid}\r\n                mutateBoard={boardData.mutate}\r\n              />\r\n            )}\r\n          </DndContext>\r\n        </section>\r\n      </div>\r\n      <EditBoardModal>\r\n        <BoardForm\r\n          formType=\"edit\"\r\n          boardData={boardData.data}\r\n          onBoardUpdated={handleBoardUpdate}\r\n        />\r\n      </EditBoardModal>\r\n      <NewTaskModal>\r\n        <TaskForm\r\n          formType=\"new\"\r\n          closeModal={newTaskModal.close}\r\n          columns={sortedColumns}\r\n        />\r\n      </NewTaskModal>\r\n      <EditTaskModal>\r\n        {boardData.data && selectedTask && (\r\n          <TaskDetails\r\n            closeModal={editTaskModal.close}\r\n            taskUUID={selectedTask.uuid!}\r\n            columns={boardData.data.columns}\r\n            board={boardData}\r\n          />\r\n        )}\r\n      </EditTaskModal>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Board;\r\n"
        }
    ]
}