{
    "sourceFile": "src/app/(main)/(pages)/(kanban)/_components/Board/Column/Column.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1745855640844,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1745855640844,
            "name": "Commit-0",
            "content": "import { FC, useRef, useState } from 'react';\r\nimport Task from '../Task/Task';\r\nimport { UniqueIdentifier } from '@dnd-kit/core';\r\nimport Droppable from '../../Drag-and-drop/Droppable';\r\nimport { SortableContext, verticalListSortingStrategy } from '@dnd-kit/sortable';\r\nimport type { Task as TaskType } from '@/types';\r\nimport useClickOutside from '@/hooks/useClickOutside';\r\nimport ColorPicker from '../../ColorPicker/ColorPicker';\r\nimport { mutate } from 'swr';\r\n\r\ntype ColumnData = {\r\n    color: string;\r\n    tasks: TaskType[];\r\n    uuid: string;\r\n    board_uuid: string;\r\n};\r\n\r\ntype ColumnProps = {\r\n    name: UniqueIdentifier;\r\n    columnData: ColumnData;\r\n    onTaskClick: (task: any) => void;\r\n};\r\n\r\ntype ColumnHeaderProps = {\r\n    name: string;\r\n    columnData: ColumnData;\r\n};\r\n\r\nconst ColumnHeader: FC<ColumnHeaderProps> = ({ name, columnData }) => {\r\n    const [color, setColor] = useState(columnData.color);\r\n    const [pickerIsOpen, setPickerIsOpen] = useState(false);\r\n\r\n    const pickerRef = useRef<HTMLDivElement>(null);\r\n    const colorIndicatorRef = useRef<HTMLButtonElement>(null);\r\n\r\n    useClickOutside(pickerRef, (e) => {\r\n        if (e.target === colorIndicatorRef.current) return;\r\n        setColor(columnData.color);\r\n        setPickerIsOpen(false);\r\n    });\r\n\r\n    const handlePickerToggle = () => {\r\n        if (pickerIsOpen) setColor(columnData.color); // reset color if picker is closed without saving\r\n        setPickerIsOpen(!pickerIsOpen);\r\n    };\r\n\r\n    const colorChangeHandler = () => {\r\n        fetch(`/api/columns/${columnData.uuid}`, {\r\n            method: 'PUT',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({\r\n                color,\r\n            }),\r\n        }).then(() => {\r\n            mutate(`/api/boards/${columnData.board_uuid}`);\r\n            setPickerIsOpen(false);\r\n        });\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <div className=\"relative mb-6 flex\">\r\n                <button\r\n                    ref={colorIndicatorRef}\r\n                    data-testid=\"column-color\"\r\n                    className={`mr-3 h-4 w-4 rounded-full`}\r\n                    style={{ backgroundColor: color }}\r\n                    onClick={handlePickerToggle}\r\n                />\r\n                {pickerIsOpen && (\r\n                    <div ref={pickerRef}>\r\n                        <ColorPicker\r\n                            className=\"absolute top-6\"\r\n                            initialColor={columnData.color}\r\n                            setColor={setColor}\r\n                            onSubmit={colorChangeHandler}\r\n                        />\r\n                    </div>\r\n                )}\r\n\r\n                <h3\r\n                    data-testid=\"column-header\"\r\n                    className=\"text-xs font-bold uppercase tracking-[.2rem] dark:text-mid-grey\"\r\n                >\r\n                    {name} {`(${columnData.tasks.length})`}\r\n                </h3>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\nconst Column: FC<ColumnProps> = ({ name, columnData, onTaskClick }) => {\r\n    return (\r\n        <Droppable droppableId={name} className=\"z-10 h-min w-72\" data-testid=\"board-column\">\r\n            <ColumnHeader name={name.toString()} columnData={columnData} />\r\n            <SortableContext items={columnData.tasks.map((task) => task.uuid)} strategy={verticalListSortingStrategy}>\r\n                <ul>\r\n                    {columnData.tasks.map((task, i) => (\r\n                        <Task key={i} taskData={task} onTaskClick={onTaskClick} />\r\n                    ))}\r\n                </ul>\r\n            </SortableContext>\r\n        </Droppable>\r\n    );\r\n};\r\n\r\nexport default Column;\r\n\r\n\r\n"
        }
    ]
}