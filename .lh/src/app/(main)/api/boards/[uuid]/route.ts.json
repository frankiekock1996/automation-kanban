{
    "sourceFile": "src/app/(main)/api/boards/[uuid]/route.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746012809727,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746012809727,
            "name": "Commit-0",
            "content": "import { db } from \"@/lib/db\";\r\nimport { validate } from \"uuid\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport { randomHexColor } from \"@/utils/utils\";\r\nimport { auth } from \"@clerk/nextjs/server\";\r\nimport { NextResponse, NextRequest } from \"next/server\";\r\n\r\nexport async function GET(\r\n  req: NextRequest,\r\n  { params }: { params: { uuid: string } }\r\n) {\r\n  const { userId } = auth();\r\n  if (!userId) return NextResponse.json(\"Unauthorized\", { status: 401 });\r\n\r\n  const uuid = params.uuid;\r\n  if (!validate(uuid)) return NextResponse.json(\"Invalid UUID\", { status: 400 });\r\n\r\n  try {\r\n    const board = await db.board.findFirst({\r\n      where: {\r\n        uuid,\r\n        clerkId: userId,\r\n      },\r\n      include: {\r\n        columns: {\r\n          include: {\r\n            tasks: {\r\n              include: {\r\n                subtasks: {\r\n                  orderBy: { id: \"asc\" },\r\n                },\r\n              },\r\n              orderBy: { position: \"asc\" },\r\n            },\r\n          },\r\n          orderBy: { position: \"asc\" },\r\n        },\r\n      },\r\n    });\r\n\r\n    return board\r\n      ? NextResponse.json(board)\r\n      : NextResponse.json(\"Board not found\", { status: 404 });\r\n  } catch (e) {\r\n    console.error(e);\r\n    return NextResponse.json(\"Internal server error\", { status: 500 });\r\n  }\r\n}\r\n\r\nexport async function PUT(\r\n  req: NextRequest,\r\n  { params }: { params: { uuid: string } }\r\n) {\r\n  const { userId } = auth();\r\n  if (!userId) return NextResponse.json(\"Unauthorized\", { status: 401 });\r\n\r\n  const uuid = params.uuid;\r\n  if (!validate(uuid)) return NextResponse.json(\"Invalid UUID\", { status: 400 });\r\n\r\n  try {\r\n    const boardData = await req.json();\r\n\r\n    const currentBoard = await db.board.findFirst({\r\n      where: {\r\n        uuid,\r\n        clerkId: userId,\r\n      },\r\n      include: {\r\n        columns: true,\r\n      },\r\n    });\r\n\r\n    if (!currentBoard) return NextResponse.json(\"Board not found\", { status: 404 });\r\n\r\n    // Ensure unique column names\r\n    const columns = boardData.columns || [];\r\n    const columnNames = new Set<string>();\r\n    for (const col of columns) {\r\n      if (columnNames.has(col.name)) {\r\n        return NextResponse.json(\"Column names must be unique\", { status: 400 });\r\n      }\r\n      columnNames.add(col.name);\r\n    }\r\n\r\n    await db.$transaction(async (tx) => {\r\n      // Update board name\r\n      if (boardData.name !== currentBoard.name) {\r\n        await tx.board.updateMany({\r\n          where: { uuid, clerkId: userId },\r\n          data: { name: boardData.name },\r\n        });\r\n      }\r\n\r\n      // Delete removed columns\r\n      const currentColumnUUIDs = currentBoard.columns.map((col) => col.uuid);\r\n      const incomingColumnUUIDs = columns.map((col: { uuid: any; }) => col.uuid).filter(Boolean);\r\n      const columnsToDelete = currentColumnUUIDs.filter(\r\n        (id) => !incomingColumnUUIDs.includes(id)\r\n      );\r\n\r\n      if (columnsToDelete.length > 0) {\r\n        await tx.column.deleteMany({\r\n          where: { uuid: { in: columnsToDelete } },\r\n        });\r\n      }\r\n\r\n      // Upsert columns\r\n      for (const col of columns) {\r\n        await tx.column.upsert({\r\n          where: {\r\n            uuid: col.uuid || \"\", // If empty, will trigger create\r\n          },\r\n          create: {\r\n            uuid: col.uuid || uuidv4(),\r\n            name: col.name,\r\n            position: col.position,\r\n            color: col.color || randomHexColor(),\r\n            board_uuid: uuid,\r\n            clerkId: userId,\r\n          },\r\n          update: {\r\n            name: col.name,\r\n            position: col.position,\r\n            color: col.color || randomHexColor(),\r\n          },\r\n        });\r\n      }\r\n    });\r\n\r\n    return NextResponse.json(\"Board updated successfully\");\r\n  } catch (e) {\r\n    console.error(e);\r\n    return NextResponse.json(\"Internal server error\", { status: 500 });\r\n  }\r\n}\r\n"
        }
    ]
}